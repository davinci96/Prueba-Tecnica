on:
  push:
    branches:
      - main
      - release
      - develop
    paths:
      - 'aws-Resrcs/**'
name: DeployInfra

env:
    region: ${{ github.ref == 'refs/heads/develop' && 'us-east-1' || (github.ref == 'refs/heads/main' && 'us-east-2') || (github.ref == 'refs/heads/release' && 'us-west-2') }}


jobs:
  DeployInfra2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Up Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      - name: Install Dependencies
        run: |
          npm install -g aws-cdk
          cd aws-Resrcs
          ls -l
          pip install -r requirements.txt

      - name: Bootstrap CDK
        run: |
          cd aws-Resrcs
          cdk bootstrap

      - name: Deploy Infra
        run: |
          cd aws-Resrcs
          echo "Deploying to development environment..."
          cdk deploy VpcStack EcrStack --require-approval never

      - name: Deploy Dynamodb Elasticache
        run: |
          cd aws-Resrcs
          echo "Deploying to development environment..."
          cdk deploy DynamoDbStack CacheStack --require-approval never

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ env.region }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.region }}.amazonaws.com

      - name: Build Docker image
        run: docker build -t pragma ./pdfmerge

      - name: Tag Docker image
        run: docker tag pragma:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.region }}.amazonaws.com/pragma:latest

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.region }}.amazonaws.com/pragma:latest


  Deploy-Ecs-Elb:
    runs-on: ubuntu-latest
    needs: DeployInfra2
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set Up Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      - name: Install Dependencies
        run: |
          npm install -g aws-cdk
          cd aws-Resrcs
          ls -l
          pip install -r requirements.txt

      - name: Bootstrap CDK
        run: |
          cd aws-Resrcs
          cdk bootstrap

      - name: Deploy ECS
        run: |
          cd aws-Resrcs
          echo "Deploying to development environment..."
          cdk deploy EcsStack --require-approval never

      - name: Deploy ELB
        run: |
          cd aws-Resrcs
          echo "Deploying to development environment..."
          cdk deploy ElbStack --require-approval never

      - name: Deploy CloudWatch
        run: |
          cd aws-Resrcs
          echo "Deploying to development environment..."
          cdk deploy CloudWatchStack --require-approval never